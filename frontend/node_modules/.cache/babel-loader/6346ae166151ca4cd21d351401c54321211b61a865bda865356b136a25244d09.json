{"ast":null,"code":"import { ref, onMounted, computed, onBeforeUnmount } from \"vue\";\nimport { ElMessage } from \"element-plus\";\nimport { KnifeFork, Calendar, User, Document, Setting, DataLine, Refresh } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\n\n// Get user information\n\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const userInfo = ref(JSON.parse(localStorage.getItem(\"userInfo\") || \"{}\"));\n    const username = computed(() => userInfo.value.name || \"Admin\");\n\n    // Statistics data\n    const statisticsData = ref({\n      totalRestaurants: 0,\n      pendingReservations: 0,\n      weeklyReservations: 0,\n      totalReservations: 0\n    });\n\n    // Reservation chart data\n    const reservationData = ref({\n      dailyReservations: [],\n      statusCount: {}\n    });\n\n    // Restaurant chart data\n    const restaurantData = ref({\n      dailyRestaurants: [],\n      statusCount: {}\n    });\n\n    // Current time and day of week\n    const currentTime = computed(() => {\n      const now = new Date();\n      return now.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      });\n    });\n    const dayOfWeek = computed(() => {\n      const now = new Date();\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      return days[now.getDay()];\n    });\n\n    // Chart instances and DOM references\n    const reservationChartDom = ref(null);\n    const restaurantChartDom = ref(null);\n    let reservationChart = null;\n    let restaurantChart = null;\n\n    // Get statistics data\n    const fetchStatistics = async () => {\n      try {\n        const res = await request({\n          url: \"/admin/statistics/overview\",\n          method: \"get\"\n        });\n        if (res.code === 200) {\n          statisticsData.value = res.data;\n          ElMessage.success(\"Data updated\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch statistics:\", error);\n        ElMessage.error(\"Failed to fetch statistics, please try again later\");\n\n        // Use mock data (development environment)\n        statisticsData.value = {\n          totalRestaurants: 125,\n          pendingReservations: 15,\n          weeklyReservations: 78,\n          totalReservations: 1200\n        };\n      }\n    };\n\n    // Get reservation statistics\n    const fetchReservationData = async () => {\n      try {\n        const res = await request({\n          url: \"/admin/statistics/reservations\",\n          method: \"get\"\n        });\n        if (res.code === 200) {\n          reservationData.value = res.data;\n          renderReservationChart();\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch reservation statistics:\", error);\n        renderReservationChart();\n      }\n    };\n\n    // Get restaurant statistics\n    const fetchRestaurantData = async () => {\n      try {\n        const res = await request({\n          url: \"/admin/statistics/restaurants\",\n          method: \"get\"\n        });\n        if (res.code === 200) {\n          restaurantData.value = res.data;\n          renderRestaurantChart();\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch restaurant statistics:\", error);\n        renderRestaurantChart();\n      }\n    };\n\n    // Render reservation statistics chart\n    const renderReservationChart = () => {\n      if (!reservationChartDom.value) return;\n      const data = reservationData.value;\n      if (!data || !data.dailyReservations || data.dailyReservations.length === 0) return;\n\n      // Process dates and data\n      const dates = data.dailyReservations.map(item => item.date);\n      const totalCounts = data.dailyReservations.map(item => item.count);\n\n      // Create status data series\n      const statusSeries = Object.keys(data.statusCount).map(status => {\n        const statusData = data.dailyReservations.map(item => item.statusCount[status] || 0);\n        const colors = {\n          \"Pending\": \"#f7c34a\",\n          \"Confirmed\": \"#4af7a1\",\n          \"Completed\": \"#67c23a\",\n          \"Cancelled\": \"#f56c6c\",\n          \"Rejected\": \"#909399\"\n        };\n        return {\n          name: status,\n          type: \"line\",\n          data: statusData,\n          smooth: true,\n          symbol: \"circle\",\n          symbolSize: 6,\n          lineStyle: {\n            width: 2,\n            color: colors[status] || \"#909399\"\n          },\n          itemStyle: {\n            color: colors[status] || \"#909399\"\n          }\n        };\n      });\n\n      // Initialize chart\n      if (reservationChart) {\n        reservationChart.dispose();\n      }\n      if (reservationChartDom.value) {\n        reservationChart = echarts.init(reservationChartDom.value, isDarkMode() ? \"dark\" : null);\n\n        // Configure options\n        const option = {\n          tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n              type: \"cross\",\n              label: {\n                backgroundColor: \"#6a7985\"\n              }\n            }\n          },\n          legend: {\n            data: [\"Total Reservations\", ...Object.keys(data.statusCount)],\n            bottom: \"0%\"\n          },\n          grid: {\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"15%\",\n            top: \"3%\",\n            containLabel: true\n          },\n          xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: dates,\n            axisLabel: {\n              formatter: value => {\n                const date = new Date(value);\n                return `${date.getMonth() + 1}/${date.getDate()}`;\n              }\n            }\n          },\n          yAxis: {\n            type: \"value\"\n          },\n          series: [{\n            name: \"Total Reservations\",\n            type: \"line\",\n            smooth: true,\n            lineStyle: {\n              width: 3,\n              color: \"#4a6cf7\"\n            },\n            itemStyle: {\n              color: \"#4a6cf7\"\n            },\n            symbolSize: 8,\n            data: totalCounts\n          }, ...statusSeries]\n        };\n\n        // Set dark mode\n        if (isDarkMode()) {\n          setDarkModeChart(option);\n        }\n        reservationChart.setOption(option);\n      }\n    };\n\n    // Render restaurant statistics chart\n    const renderRestaurantChart = () => {\n      if (!restaurantChartDom.value) return;\n      const data = restaurantData.value;\n      if (!data || !data.dailyRestaurants || data.dailyRestaurants.length === 0) return;\n\n      // Process dates and data\n      const dates = data.dailyRestaurants.map(item => item.date);\n      const totalCounts = data.dailyRestaurants.map(item => item.count);\n\n      // Create status data series\n      const statusSeries = Object.keys(data.statusCount).map(status => {\n        const statusData = data.dailyRestaurants.map(item => item.statusCount[status] || 0);\n        const colors = {\n          \"Pending Review\": \"#f7c34a\",\n          \"Approved\": \"#4af7a1\",\n          \"Operating\": \"#67c23a\",\n          \"Closed\": \"#f56c6c\"\n        };\n        return {\n          name: status,\n          type: \"line\",\n          data: statusData,\n          smooth: true,\n          symbol: \"circle\",\n          symbolSize: 6,\n          lineStyle: {\n            width: 2,\n            color: colors[status] || \"#909399\"\n          },\n          itemStyle: {\n            color: colors[status] || \"#909399\"\n          }\n        };\n      });\n\n      // Initialize chart\n      if (restaurantChart) {\n        restaurantChart.dispose();\n      }\n      if (restaurantChartDom.value) {\n        restaurantChart = echarts.init(restaurantChartDom.value, isDarkMode() ? \"dark\" : null);\n\n        // Configure options\n        const option = {\n          tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n              type: \"cross\",\n              label: {\n                backgroundColor: \"#6a7985\"\n              }\n            }\n          },\n          legend: {\n            data: [\"Total Restaurants\", ...Object.keys(data.statusCount)],\n            bottom: \"0%\"\n          },\n          grid: {\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"15%\",\n            top: \"3%\",\n            containLabel: true\n          },\n          xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: dates,\n            axisLabel: {\n              formatter: value => {\n                const date = new Date(value);\n                return `${date.getMonth() + 1}/${date.getDate()}`;\n              }\n            }\n          },\n          yAxis: {\n            type: \"value\"\n          },\n          series: [{\n            name: \"Total Restaurants\",\n            type: \"line\",\n            smooth: true,\n            lineStyle: {\n              width: 3,\n              color: \"#4a6cf7\"\n            },\n            itemStyle: {\n              color: \"#4a6cf7\"\n            },\n            symbolSize: 8,\n            data: totalCounts\n          }, ...statusSeries]\n        };\n\n        // Set dark mode\n        if (isDarkMode()) {\n          setDarkModeChart(option);\n        }\n        restaurantChart.setOption(option);\n      }\n    };\n\n    // Check if dark mode is enabled\n    const isDarkMode = () => {\n      return window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    };\n\n    // Set dark mode chart\n    const setDarkModeChart = option => {\n      option.backgroundColor = \"#2d3748\";\n      option.textStyle = {\n        color: \"#e2e8f0\"\n      };\n      if (option.legend) {\n        option.legend.textStyle = {\n          color: \"#e2e8f0\"\n        };\n      }\n      if (option.xAxis) {\n        if (Array.isArray(option.xAxis)) {\n          option.xAxis.forEach(axis => {\n            axis.axisLine = {\n              lineStyle: {\n                color: \"#4a5568\"\n              }\n            };\n            axis.axisLabel = {\n              ...axis.axisLabel,\n              color: \"#a0aec0\"\n            };\n          });\n        } else {\n          option.xAxis.axisLine = {\n            lineStyle: {\n              color: \"#4a5568\"\n            }\n          };\n          option.xAxis.axisLabel = {\n            ...option.xAxis.axisLabel,\n            color: \"#a0aec0\"\n          };\n        }\n      }\n      if (option.yAxis) {\n        if (Array.isArray(option.yAxis)) {\n          option.yAxis.forEach(axis => {\n            axis.axisLine = {\n              lineStyle: {\n                color: \"#4a5568\"\n              }\n            };\n            axis.axisLabel = {\n              ...axis.axisLabel,\n              color: \"#a0aec0\"\n            };\n            axis.splitLine = {\n              lineStyle: {\n                color: \"#4a5568\"\n              }\n            };\n          });\n        } else {\n          option.yAxis.axisLine = {\n            lineStyle: {\n              color: \"#4a5568\"\n            }\n          };\n          option.yAxis.axisLabel = {\n            ...option.yAxis.axisLabel,\n            color: \"#a0aec0\"\n          };\n          option.yAxis.splitLine = {\n            lineStyle: {\n              color: \"#4a5568\"\n            }\n          };\n        }\n      }\n    };\n\n    // Refresh statistics data\n    const refreshStats = () => {\n      fetchStatistics();\n      fetchReservationData();\n      fetchRestaurantData();\n    };\n\n    // Handle window resize\n    const handleResize = () => {\n      if (reservationChart && reservationChartDom.value) {\n        reservationChart.resize();\n      }\n      if (restaurantChart && restaurantChartDom.value) {\n        restaurantChart.resize();\n      }\n    };\n\n    // Setup dark mode listener\n    const setupDarkModeListener = () => {\n      const darkModeMediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      const handleDarkModeChange = () => {\n        if (reservationChart && reservationChartDom.value) {\n          const option = reservationChart.getOption();\n          reservationChart.dispose();\n          reservationChart = echarts.init(reservationChartDom.value, isDarkMode() ? \"dark\" : null);\n          if (isDarkMode()) {\n            setDarkModeChart(option);\n          }\n          reservationChart.setOption(option);\n        }\n        if (restaurantChart && restaurantChartDom.value) {\n          const option = restaurantChart.getOption();\n          restaurantChart.dispose();\n          restaurantChart = echarts.init(restaurantChartDom.value, isDarkMode() ? \"dark\" : null);\n          if (isDarkMode()) {\n            setDarkModeChart(option);\n          }\n          restaurantChart.setOption(option);\n        }\n      };\n      darkModeMediaQuery.addEventListener(\"change\", handleDarkModeChange);\n      return () => {\n        darkModeMediaQuery.removeEventListener(\"change\", handleDarkModeChange);\n      };\n    };\n\n    // Fetch data on component mount\n    onMounted(() => {\n      fetchStatistics();\n      fetchReservationData();\n      fetchRestaurantData();\n\n      // Add window resize event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Add MutationObserver to listen for DOM changes\n      const observer = new MutationObserver(() => {\n        // When DOM structure changes, such as sidebar collapse, resize charts\n        setTimeout(() => {\n          handleResize();\n        }, 300);\n      });\n\n      // Observe document.body's child elements\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        attributeFilter: [\"class\", \"style\"]\n      });\n\n      // Setup dark mode listener\n      const removeDarkModeListener = setupDarkModeListener();\n      onBeforeUnmount(() => {\n        // Dispose chart instances\n        if (reservationChart) {\n          reservationChart.dispose();\n          reservationChart = null;\n        }\n        if (restaurantChart) {\n          restaurantChart.dispose();\n          restaurantChart = null;\n        }\n\n        // Remove event listeners and observers\n        window.removeEventListener(\"resize\", handleResize);\n        observer.disconnect();\n        removeDarkModeListener();\n      });\n    });\n    const __returned__ = {\n      userInfo,\n      username,\n      statisticsData,\n      reservationData,\n      restaurantData,\n      currentTime,\n      dayOfWeek,\n      reservationChartDom,\n      restaurantChartDom,\n      get reservationChart() {\n        return reservationChart;\n      },\n      set reservationChart(v) {\n        reservationChart = v;\n      },\n      get restaurantChart() {\n        return restaurantChart;\n      },\n      set restaurantChart(v) {\n        restaurantChart = v;\n      },\n      fetchStatistics,\n      fetchReservationData,\n      fetchRestaurantData,\n      renderReservationChart,\n      renderRestaurantChart,\n      isDarkMode,\n      setDarkModeChart,\n      refreshStats,\n      handleResize,\n      setupDarkModeListener,\n      ref,\n      onMounted,\n      computed,\n      onBeforeUnmount,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get KnifeFork() {\n        return KnifeFork;\n      },\n      get Calendar() {\n        return Calendar;\n      },\n      get User() {\n        return User;\n      },\n      get Document() {\n        return Document;\n      },\n      get Setting() {\n        return Setting;\n      },\n      get DataLine() {\n        return DataLine;\n      },\n      get Refresh() {\n        return Refresh;\n      },\n      get request() {\n        return request;\n      },\n      get echarts() {\n        return echarts;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","onBeforeUnmount","ElMessage","KnifeFork","Calendar","User","Document","Setting","DataLine","Refresh","request","echarts","userInfo","JSON","parse","localStorage","getItem","username","value","name","statisticsData","totalRestaurants","pendingReservations","weeklyReservations","totalReservations","reservationData","dailyReservations","statusCount","restaurantData","dailyRestaurants","currentTime","now","Date","toLocaleDateString","year","month","day","dayOfWeek","days","getDay","reservationChartDom","restaurantChartDom","reservationChart","restaurantChart","fetchStatistics","res","url","method","code","data","success","error","console","fetchReservationData","renderReservationChart","fetchRestaurantData","renderRestaurantChart","length","dates","map","item","date","totalCounts","count","statusSeries","Object","keys","status","statusData","colors","type","smooth","symbol","symbolSize","lineStyle","width","color","itemStyle","dispose","init","isDarkMode","option","tooltip","trigger","axisPointer","label","backgroundColor","legend","bottom","grid","left","right","top","containLabel","xAxis","boundaryGap","axisLabel","formatter","getMonth","getDate","yAxis","series","setDarkModeChart","setOption","window","matchMedia","matches","textStyle","Array","isArray","forEach","axis","axisLine","splitLine","refreshStats","handleResize","resize","setupDarkModeListener","darkModeMediaQuery","handleDarkModeChange","getOption","addEventListener","removeEventListener","observer","MutationObserver","setTimeout","observe","document","body","childList","subtree","attributes","attributeFilter","removeDarkModeListener","disconnect"],"sources":["/Users/taoyuxuan/Documents/RestaurantReservation/qd/src/views/admin/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <div class=\"stats-section neomorphic\">\r\n      <div class=\"section-header\">\r\n        <h2>System Overview</h2>\r\n        <el-button\r\n          type=\"primary\"\r\n          size=\"small\"\r\n          class=\"neomorphic-button\"\r\n          @click=\"refreshStats\"\r\n        >\r\n          <el-icon><Refresh /></el-icon> Refresh Data\r\n        </el-button>\r\n      </div>\r\n\r\n      <el-row :gutter=\"20\" class=\"stats-row\">\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\" class=\"stat-col\">\r\n          <div class=\"stat-card neomorphic-inset\">\r\n            <div class=\"stat-icon restaurant-icon neomorphic-float\">\r\n              <el-icon :size=\"24\"><KnifeFork /></el-icon>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Total Restaurants</div>\r\n              <div class=\"stat-value\">\r\n                {{ statisticsData.totalRestaurants }}\r\n              </div>\r\n              <div class=\"stat-desc\">Active Restaurants</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\" class=\"stat-col\">\r\n          <div class=\"stat-card neomorphic-inset\">\r\n            <div class=\"stat-icon reservation-icon neomorphic-float\">\r\n              <el-icon :size=\"24\"><Calendar /></el-icon>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Pending Reservations</div>\r\n              <div class=\"stat-value\">\r\n                {{ statisticsData.pendingReservations }}\r\n              </div>\r\n              <div class=\"stat-desc\">Reservations to Confirm</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\" class=\"stat-col\">\r\n          <div class=\"stat-card neomorphic-inset\">\r\n            <div class=\"stat-icon weekly-icon neomorphic-float\">\r\n              <el-icon :size=\"24\"><Calendar /></el-icon>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Weekly Reservations</div>\r\n              <div class=\"stat-value\">\r\n                {{ statisticsData.weeklyReservations }}\r\n              </div>\r\n              <div class=\"stat-desc\">Total Reservations in Past 7 Days</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\" class=\"stat-col\">\r\n          <div class=\"stat-card neomorphic-inset\">\r\n            <div class=\"stat-icon total-icon neomorphic-float\">\r\n              <el-icon :size=\"24\"><Document /></el-icon>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Total Reservations</div>\r\n              <div class=\"stat-value\">\r\n                {{ statisticsData.totalReservations }}\r\n              </div>\r\n              <div class=\"stat-desc\">Cumulative Reservations</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <div class=\"charts-section neomorphic\">\r\n      <div class=\"section-header\">\r\n        <h2>Data Statistics</h2>\r\n        <el-button\r\n          type=\"primary\"\r\n          size=\"small\"\r\n          class=\"neomorphic-button\"\r\n          @click=\"refreshStats\"\r\n        >\r\n          <el-icon><Refresh /></el-icon> Refresh Charts\r\n        </el-button>\r\n      </div>\r\n\r\n      <el-row :gutter=\"20\">\r\n        <el-col :xs=\"24\" :md=\"12\">\r\n          <div class=\"chart-box neomorphic-inset\">\r\n            <div class=\"chart-title\">Reservation Statistics (Last 7 Days)</div>\r\n            <div class=\"chart-container\" ref=\"reservationChartDom\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :xs=\"24\" :md=\"12\">\r\n          <div class=\"chart-box neomorphic-inset\">\r\n            <div class=\"chart-title\">Restaurant Statistics (Last 7 Days)</div>\r\n            <div class=\"chart-container\" ref=\"restaurantChartDom\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed, onBeforeUnmount } from \"vue\";\r\nimport { ElMessage } from \"element-plus\";\r\nimport {\r\n  KnifeFork,\r\n  Calendar,\r\n  User,\r\n  Document,\r\n  Setting,\r\n  DataLine,\r\n  Refresh,\r\n} from \"@element-plus/icons-vue\";\r\nimport request from \"@/utils/request\";\r\nimport * as echarts from \"echarts\";\r\n\r\n// Get user information\r\nconst userInfo = ref(JSON.parse(localStorage.getItem(\"userInfo\") || \"{}\"));\r\nconst username = computed(() => userInfo.value.name || \"Admin\");\r\n\r\n// Statistics data\r\nconst statisticsData = ref({\r\n  totalRestaurants: 0,\r\n  pendingReservations: 0,\r\n  weeklyReservations: 0,\r\n  totalReservations: 0,\r\n});\r\n\r\n// Reservation chart data\r\nconst reservationData = ref({\r\n  dailyReservations: [],\r\n  statusCount: {},\r\n});\r\n\r\n// Restaurant chart data\r\nconst restaurantData = ref({\r\n  dailyRestaurants: [],\r\n  statusCount: {},\r\n});\r\n\r\n// Current time and day of week\r\nconst currentTime = computed(() => {\r\n  const now = new Date();\r\n  return now.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n});\r\n\r\nconst dayOfWeek = computed(() => {\r\n  const now = new Date();\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  return days[now.getDay()];\r\n});\r\n\r\n// Chart instances and DOM references\r\nconst reservationChartDom = ref(null);\r\nconst restaurantChartDom = ref(null);\r\nlet reservationChart = null;\r\nlet restaurantChart = null;\r\n\r\n// Get statistics data\r\nconst fetchStatistics = async () => {\r\n  try {\r\n    const res = await request({\r\n      url: \"/admin/statistics/overview\",\r\n      method: \"get\",\r\n    });\r\n\r\n    if (res.code === 200) {\r\n      statisticsData.value = res.data;\r\n      ElMessage.success(\"Data updated\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch statistics:\", error);\r\n    ElMessage.error(\"Failed to fetch statistics, please try again later\");\r\n\r\n    // Use mock data (development environment)\r\n    statisticsData.value = {\r\n      totalRestaurants: 125,\r\n      pendingReservations: 15,\r\n      weeklyReservations: 78,\r\n      totalReservations: 1200,\r\n    };\r\n  }\r\n};\r\n\r\n// Get reservation statistics\r\nconst fetchReservationData = async () => {\r\n  try {\r\n    const res = await request({\r\n      url: \"/admin/statistics/reservations\",\r\n      method: \"get\",\r\n    });\r\n\r\n    if (res.code === 200) {\r\n      reservationData.value = res.data;\r\n      renderReservationChart();\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch reservation statistics:\", error);\r\n    renderReservationChart();\r\n  }\r\n};\r\n\r\n// Get restaurant statistics\r\nconst fetchRestaurantData = async () => {\r\n  try {\r\n    const res = await request({\r\n      url: \"/admin/statistics/restaurants\",\r\n      method: \"get\",\r\n    });\r\n\r\n    if (res.code === 200) {\r\n      restaurantData.value = res.data;\r\n      renderRestaurantChart();\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch restaurant statistics:\", error);\r\n    renderRestaurantChart();\r\n  }\r\n};\r\n\r\n// Render reservation statistics chart\r\nconst renderReservationChart = () => {\r\n  if (!reservationChartDom.value) return;\r\n\r\n  const data = reservationData.value;\r\n  if (!data || !data.dailyReservations || data.dailyReservations.length === 0)\r\n    return;\r\n\r\n  // Process dates and data\r\n  const dates = data.dailyReservations.map((item) => item.date);\r\n  const totalCounts = data.dailyReservations.map((item) => item.count);\r\n\r\n  // Create status data series\r\n  const statusSeries = Object.keys(data.statusCount).map((status) => {\r\n    const statusData = data.dailyReservations.map(\r\n      (item) => item.statusCount[status] || 0\r\n    );\r\n    const colors = {\r\n      \"Pending\": \"#f7c34a\",\r\n      \"Confirmed\": \"#4af7a1\",\r\n      \"Completed\": \"#67c23a\",\r\n      \"Cancelled\": \"#f56c6c\",\r\n      \"Rejected\": \"#909399\",\r\n    };\r\n\r\n    return {\r\n      name: status,\r\n      type: \"line\",\r\n      data: statusData,\r\n      smooth: true,\r\n      symbol: \"circle\",\r\n      symbolSize: 6,\r\n      lineStyle: {\r\n        width: 2,\r\n        color: colors[status] || \"#909399\",\r\n      },\r\n      itemStyle: {\r\n        color: colors[status] || \"#909399\",\r\n      },\r\n    };\r\n  });\r\n\r\n  // Initialize chart\r\n  if (reservationChart) {\r\n    reservationChart.dispose();\r\n  }\r\n\r\n  if (reservationChartDom.value) {\r\n    reservationChart = echarts.init(\r\n      reservationChartDom.value,\r\n      isDarkMode() ? \"dark\" : null\r\n    );\r\n\r\n    // Configure options\r\n    const option = {\r\n      tooltip: {\r\n        trigger: \"axis\",\r\n        axisPointer: {\r\n          type: \"cross\",\r\n          label: {\r\n            backgroundColor: \"#6a7985\",\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        data: [\"Total Reservations\", ...Object.keys(data.statusCount)],\r\n        bottom: \"0%\",\r\n      },\r\n      grid: {\r\n        left: \"3%\",\r\n        right: \"4%\",\r\n        bottom: \"15%\",\r\n        top: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        boundaryGap: false,\r\n        data: dates,\r\n        axisLabel: {\r\n          formatter: (value) => {\r\n            const date = new Date(value);\r\n            return `${date.getMonth() + 1}/${date.getDate()}`;\r\n          },\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Total Reservations\",\r\n          type: \"line\",\r\n          smooth: true,\r\n          lineStyle: {\r\n            width: 3,\r\n            color: \"#4a6cf7\",\r\n          },\r\n          itemStyle: {\r\n            color: \"#4a6cf7\",\r\n          },\r\n          symbolSize: 8,\r\n          data: totalCounts,\r\n        },\r\n        ...statusSeries,\r\n      ],\r\n    };\r\n\r\n    // Set dark mode\r\n    if (isDarkMode()) {\r\n      setDarkModeChart(option);\r\n    }\r\n\r\n    reservationChart.setOption(option);\r\n  }\r\n};\r\n\r\n// Render restaurant statistics chart\r\nconst renderRestaurantChart = () => {\r\n  if (!restaurantChartDom.value) return;\r\n\r\n  const data = restaurantData.value;\r\n  if (!data || !data.dailyRestaurants || data.dailyRestaurants.length === 0)\r\n    return;\r\n\r\n  // Process dates and data\r\n  const dates = data.dailyRestaurants.map((item) => item.date);\r\n  const totalCounts = data.dailyRestaurants.map((item) => item.count);\r\n\r\n  // Create status data series\r\n  const statusSeries = Object.keys(data.statusCount).map((status) => {\r\n    const statusData = data.dailyRestaurants.map(\r\n      (item) => item.statusCount[status] || 0\r\n    );\r\n    const colors = {\r\n      \"Pending Review\": \"#f7c34a\",\r\n      \"Approved\": \"#4af7a1\",\r\n      \"Operating\": \"#67c23a\",\r\n      \"Closed\": \"#f56c6c\",\r\n    };\r\n\r\n    return {\r\n      name: status,\r\n      type: \"line\",\r\n      data: statusData,\r\n      smooth: true,\r\n      symbol: \"circle\",\r\n      symbolSize: 6,\r\n      lineStyle: {\r\n        width: 2,\r\n        color: colors[status] || \"#909399\",\r\n      },\r\n      itemStyle: {\r\n        color: colors[status] || \"#909399\",\r\n      },\r\n    };\r\n  });\r\n\r\n  // Initialize chart\r\n  if (restaurantChart) {\r\n    restaurantChart.dispose();\r\n  }\r\n\r\n  if (restaurantChartDom.value) {\r\n    restaurantChart = echarts.init(\r\n      restaurantChartDom.value,\r\n      isDarkMode() ? \"dark\" : null\r\n    );\r\n\r\n    // Configure options\r\n    const option = {\r\n      tooltip: {\r\n        trigger: \"axis\",\r\n        axisPointer: {\r\n          type: \"cross\",\r\n          label: {\r\n            backgroundColor: \"#6a7985\",\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        data: [\"Total Restaurants\", ...Object.keys(data.statusCount)],\r\n        bottom: \"0%\",\r\n      },\r\n      grid: {\r\n        left: \"3%\",\r\n        right: \"4%\",\r\n        bottom: \"15%\",\r\n        top: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        boundaryGap: false,\r\n        data: dates,\r\n        axisLabel: {\r\n          formatter: (value) => {\r\n            const date = new Date(value);\r\n            return `${date.getMonth() + 1}/${date.getDate()}`;\r\n          },\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Total Restaurants\",\r\n          type: \"line\",\r\n          smooth: true,\r\n          lineStyle: {\r\n            width: 3,\r\n            color: \"#4a6cf7\",\r\n          },\r\n          itemStyle: {\r\n            color: \"#4a6cf7\",\r\n          },\r\n          symbolSize: 8,\r\n          data: totalCounts,\r\n        },\r\n        ...statusSeries,\r\n      ],\r\n    };\r\n\r\n    // Set dark mode\r\n    if (isDarkMode()) {\r\n      setDarkModeChart(option);\r\n    }\r\n\r\n    restaurantChart.setOption(option);\r\n  }\r\n};\r\n\r\n// Check if dark mode is enabled\r\nconst isDarkMode = () => {\r\n  return (\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n  );\r\n};\r\n\r\n// Set dark mode chart\r\nconst setDarkModeChart = (option) => {\r\n  option.backgroundColor = \"#2d3748\";\r\n  option.textStyle = { color: \"#e2e8f0\" };\r\n\r\n  if (option.legend) {\r\n    option.legend.textStyle = { color: \"#e2e8f0\" };\r\n  }\r\n\r\n  if (option.xAxis) {\r\n    if (Array.isArray(option.xAxis)) {\r\n      option.xAxis.forEach((axis) => {\r\n        axis.axisLine = { lineStyle: { color: \"#4a5568\" } };\r\n        axis.axisLabel = { ...axis.axisLabel, color: \"#a0aec0\" };\r\n      });\r\n    } else {\r\n      option.xAxis.axisLine = { lineStyle: { color: \"#4a5568\" } };\r\n      option.xAxis.axisLabel = { ...option.xAxis.axisLabel, color: \"#a0aec0\" };\r\n    }\r\n  }\r\n\r\n  if (option.yAxis) {\r\n    if (Array.isArray(option.yAxis)) {\r\n      option.yAxis.forEach((axis) => {\r\n        axis.axisLine = { lineStyle: { color: \"#4a5568\" } };\r\n        axis.axisLabel = { ...axis.axisLabel, color: \"#a0aec0\" };\r\n        axis.splitLine = { lineStyle: { color: \"#4a5568\" } };\r\n      });\r\n    } else {\r\n      option.yAxis.axisLine = { lineStyle: { color: \"#4a5568\" } };\r\n      option.yAxis.axisLabel = { ...option.yAxis.axisLabel, color: \"#a0aec0\" };\r\n      option.yAxis.splitLine = { lineStyle: { color: \"#4a5568\" } };\r\n    }\r\n  }\r\n};\r\n\r\n// Refresh statistics data\r\nconst refreshStats = () => {\r\n  fetchStatistics();\r\n  fetchReservationData();\r\n  fetchRestaurantData();\r\n};\r\n\r\n// Handle window resize\r\nconst handleResize = () => {\r\n  if (reservationChart && reservationChartDom.value) {\r\n    reservationChart.resize();\r\n  }\r\n  if (restaurantChart && restaurantChartDom.value) {\r\n    restaurantChart.resize();\r\n  }\r\n};\r\n\r\n// Setup dark mode listener\r\nconst setupDarkModeListener = () => {\r\n  const darkModeMediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n\r\n  const handleDarkModeChange = () => {\r\n    if (reservationChart && reservationChartDom.value) {\r\n      const option = reservationChart.getOption();\r\n      reservationChart.dispose();\r\n      reservationChart = echarts.init(\r\n        reservationChartDom.value,\r\n        isDarkMode() ? \"dark\" : null\r\n      );\r\n\r\n      if (isDarkMode()) {\r\n        setDarkModeChart(option);\r\n      }\r\n\r\n      reservationChart.setOption(option);\r\n    }\r\n\r\n    if (restaurantChart && restaurantChartDom.value) {\r\n      const option = restaurantChart.getOption();\r\n      restaurantChart.dispose();\r\n      restaurantChart = echarts.init(\r\n        restaurantChartDom.value,\r\n        isDarkMode() ? \"dark\" : null\r\n      );\r\n\r\n      if (isDarkMode()) {\r\n        setDarkModeChart(option);\r\n      }\r\n\r\n      restaurantChart.setOption(option);\r\n    }\r\n  };\r\n\r\n  darkModeMediaQuery.addEventListener(\"change\", handleDarkModeChange);\r\n\r\n  return () => {\r\n    darkModeMediaQuery.removeEventListener(\"change\", handleDarkModeChange);\r\n  };\r\n};\r\n\r\n// Fetch data on component mount\r\nonMounted(() => {\r\n  fetchStatistics();\r\n  fetchReservationData();\r\n  fetchRestaurantData();\r\n\r\n  // Add window resize event listener\r\n  window.addEventListener(\"resize\", handleResize);\r\n\r\n  // Add MutationObserver to listen for DOM changes\r\n  const observer = new MutationObserver(() => {\r\n    // When DOM structure changes, such as sidebar collapse, resize charts\r\n    setTimeout(() => {\r\n      handleResize();\r\n    }, 300);\r\n  });\r\n\r\n  // Observe document.body's child elements\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n    attributes: true,\r\n    attributeFilter: [\"class\", \"style\"],\r\n  });\r\n\r\n  // Setup dark mode listener\r\n  const removeDarkModeListener = setupDarkModeListener();\r\n\r\n  onBeforeUnmount(() => {\r\n    // Dispose chart instances\r\n    if (reservationChart) {\r\n      reservationChart.dispose();\r\n      reservationChart = null;\r\n    }\r\n\r\n    if (restaurantChart) {\r\n      restaurantChart.dispose();\r\n      restaurantChart = null;\r\n    }\r\n\r\n    // Remove event listeners and observers\r\n    window.removeEventListener(\"resize\", handleResize);\r\n    observer.disconnect();\r\n    removeDarkModeListener();\r\n  });\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  padding: 24px;\r\n  background-color: #e6e7ee;\r\n  min-height: 100vh;\r\n}\r\n\r\n/* Neomorphic style base classes */\r\n.neomorphic {\r\n  border-radius: 18px;\r\n  background: #e6e7ee;\r\n  box-shadow: 8px 8px 16px #c3c4ca, -8px -8px 16px #ffffff;\r\n  padding: 25px;\r\n  margin-bottom: 30px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.neomorphic-inset {\r\n  border-radius: 15px;\r\n  background: #e6e7ee;\r\n  box-shadow: inset 5px 5px 10px #c3c4ca, inset -5px -5px 10px #ffffff;\r\n}\r\n\r\n.neomorphic-float {\r\n  border-radius: 12px;\r\n  background: linear-gradient(145deg, #f3f4fc, #d1d2d7);\r\n  box-shadow: 4px 4px 8px #c3c4ca, -4px -4px 8px #ffffff;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.neomorphic-float:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 6px 6px 12px #c3c4ca, -6px -6px 12px #ffffff;\r\n}\r\n\r\n.neomorphic-button {\r\n  background: #e6e7ee;\r\n  border: none;\r\n  border-radius: 12px;\r\n  color: #44476a;\r\n  padding: 8px 16px;\r\n  box-shadow: 3px 3px 6px #c3c4ca, -3px -3px 6px #ffffff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.neomorphic-button:hover {\r\n  box-shadow: 4px 4px 8px #c3c4ca, -4px -4px 8px #ffffff;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.neomorphic-button:active {\r\n  box-shadow: inset 2px 2px 5px #c3c4ca, inset -2px -2px 5px #ffffff;\r\n}\r\n\r\n.section-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.section-header h2 {\r\n  font-size: 1.5rem;\r\n  margin: 0;\r\n  font-weight: 600;\r\n  color: #44476a;\r\n  text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.stats-section,\r\n.charts-section {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.stats-row {\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.stat-col {\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.stat-card {\r\n  padding: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.stat-icon {\r\n  width: 52px;\r\n  height: 52px;\r\n  margin-right: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n}\r\n\r\n.restaurant-icon {\r\n  background: linear-gradient(145deg, #4a6cf7, #3f5bcf);\r\n}\r\n\r\n.reservation-icon {\r\n  background: linear-gradient(145deg, #f7c34a, #d1a43e);\r\n}\r\n\r\n.weekly-icon {\r\n  background: linear-gradient(145deg, #4af7a1, #3fd188);\r\n}\r\n\r\n.total-icon {\r\n  background: linear-gradient(145deg, #f74a6c, #d13f5c);\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-title {\r\n  font-size: 0.95rem;\r\n  color: #44476a;\r\n  margin-bottom: 8px;\r\n  font-weight: 500;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  color: #31344b;\r\n  margin-bottom: 8px;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.stat-desc {\r\n  font-size: 0.8rem;\r\n  color: #7f83a2;\r\n}\r\n\r\n.chart-box {\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: #44476a;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.chart-container {\r\n  height: 320px;\r\n  width: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n/* Adapt to dark mode */\r\n@media (prefers-color-scheme: dark) {\r\n  .dashboard-container {\r\n    background-color: #2d3748;\r\n  }\r\n\r\n  .neomorphic {\r\n    background: #2d3748;\r\n    box-shadow: 8px 8px 16px #202632, -8px -8px 16px #3a485e;\r\n  }\r\n\r\n  .neomorphic-inset {\r\n    background: #2d3748;\r\n    box-shadow: inset 5px 5px 10px #202632, inset -5px -5px 10px #3a485e;\r\n  }\r\n\r\n  .neomorphic-float {\r\n    background: linear-gradient(145deg, #313d50, #293340);\r\n    box-shadow: 4px 4px 8px #202632, -4px -4px 8px #3a485e;\r\n  }\r\n\r\n  .neomorphic-button {\r\n    background: #2d3748;\r\n    color: #cbd5e0;\r\n    box-shadow: 3px 3px 6px #202632, -3px -3px 6px #3a485e;\r\n  }\r\n\r\n  .neomorphic-button:active {\r\n    box-shadow: inset 2px 2px 5px #202632, inset -2px -2px 5px #3a485e;\r\n  }\r\n\r\n  .section-header h2,\r\n  .chart-title {\r\n    color: #e2e8f0;\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\r\n  }\r\n\r\n  .stat-title {\r\n    color: #cbd5e0;\r\n  }\r\n\r\n  .stat-value {\r\n    color: #f7fafc;\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\r\n  }\r\n\r\n  .stat-desc {\r\n    color: #a0aec0;\r\n  }\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .dashboard-container {\r\n    padding: 16px;\r\n  }\r\n\r\n  .neomorphic {\r\n    padding: 20px;\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .chart-container {\r\n    height: 280px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}